{"version":3,"file":"js/749.00e9efb7.js","mappings":"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","sources":["webpack://quantms.org/./src/api/search.js","webpack://quantms.org/./src/components/AeShow/option.js","webpack://quantms.org/./src/components/AeShow/index.vue","webpack://quantms.org/./src/components/AeShow/index.vue?7d9f"],"sourcesContent":["import request from './request'\nexport const queryKey = (proteinName) => {\n  const param = new URLSearchParams()\n  param.append('protein_name', proteinName)\n  return request({\n    method: 'post',\n    url: 'query',\n    data: param\n  })\n}\n\nexport const getProteins = () => {\n  return request({\n    method: 'get',\n    url: '/data/tissueJson.json.gz',\n    responseType: 'arraybuffer'\n  })\n}\n\nexport const getCellLineProteins = () => {\n  return request({\n    method: 'get',\n    url: '/data/cellJson.json.gz',\n    responseType: 'arraybuffer'\n  })\n}\n","const getBoxTooltips = (samples) => {\n    return {\n        trigger: 'item',\n        axisPointer: {\n            type: 'shadow'\n        },\n        textStyle: {},\n        formatter: function (param) {\n            return [\n                \"<div style='margin-bottom:5px;width:100%;border-radius:3px;text-align:center;family'><p>\" +\n                param.data[0] +\n                ' </p></div>',\n                '<hr size=1 style=\"margin: 3px 0\">',\n                \"<span style='text-align:left;color:#8f9a7a;margin-right:15px;'>Max:</span>\" +\n                parseFloat(param.data[5]).toFixed(2) +\n                '<br/>',\n                \"<span style='text-align:left;color:#8f9a7a;margin-right:15px;'>Q3:</span>\" +\n                parseFloat(param.data[4]).toFixed(2) +\n                '<br/>',\n                \"<span style='text-align:left;color:#8f9a7a;margin-right:15px;'>Median:</span>\" +\n                parseFloat(param.data[3]).toFixed(2) +\n                '<br/>',\n                \"<span style='text-align:left;color:#8f9a7a;margin-right:15px;'>Q1:</span>\" +\n                parseFloat(param.data[2]).toFixed(2) +\n                '<br/>',\n                \"<span style='text-align:left;color:#8f9a7a;margin-right:15px;'>Min:</span>\" +\n                parseFloat(param.data[1]).toFixed(2) +\n                '<br/>',\n                \"<span style='text-align:left;color:#8f9a7a;margin-right:15px;'>Samples:</span>\" +\n                (Array.isArray(samples[0])?samples[param.componentIndex][param.dataIndex]:samples[param.dataIndex]) +\n                '<br/>',\n            ].join('')\n        }\n    }\n}\n\n// option\nconst options = {\n    // backgroundColor: '#f4f5f2',\n      title: [\n      ],\n      dataset: [\n      ],\n      tooltip: {},\n    // color: tagsColor,\n    legend: {\n      show: true,\n      orient: 'vertical',\n      right: 10,\n      top: 60,\n      data: []\n      // bottom: 20,\n      },\n    grid: {\n        left: '10%',\n        right: '10%',\n        bottom: 60\n      },\n      yAxis: {\n        type: 'category',\n        boundaryGap: true,\n        nameGap: 30,\n        splitArea: {\n          show: false\n        },\n        splitLine: {\n          show: false\n        }\n      },\n      xAxis: {\n        type: 'value',\n        name: 'iBAQLog',\n        nameLocation: 'center',\n        nameGap: 40,\n        splitArea: {\n          show: false\n        },\n        splitLine: {\n          show: false\n        },\n        min: 1,\n        //max: 10\n      },\n      toolbox: {\n        feature: {\n          saveAsImage: {\n            type: 'png',\n            title: 'save as .png',\n            pixelRatio: 10\n          }\n        }\n      },\n      series: [\n      ]\n}\n\nexport {getBoxTooltips,options}","import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, withCtx as _withCtx, createBlock as _createBlock, unref as _unref, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"ae-visualization\"\n};\nconst _hoisted_2 = {\n  class: \"visualization-header\"\n};\nconst _hoisted_3 = {\n  class: \"organism-info\"\n};\nconst _hoisted_4 = {\n  class: \"visualization-controls\"\n};\nconst _hoisted_5 = {\n  class: \"protein-tags\"\n};\nconst _hoisted_6 = {\n  class: \"history-section\"\n};\nconst _hoisted_7 = {\n  class: \"history-content\"\n};\nconst _hoisted_8 = {\n  class: \"history-item-title\"\n};\nconst _hoisted_9 = {\n  class: \"visualization-card\"\n};\nimport { getProteins, getCellLineProteins } from '@/api/search';\nimport { inflate } from 'pako';\nimport * as echarts from 'echarts';\nimport { useRouter, onBeforeRouteUpdate } from \"vue-router\";\nimport { ref, onMounted, nextTick, computed, onUnmounted } from 'vue';\nimport { getBoxTooltips, options } from './option';\nexport default {\n  __name: 'index',\n  emits: ['changeLoading'],\n  setup(__props, {\n    emit: __emit\n  }) {\n    const router = useRouter();\n    const drawer = ref(false);\n    const emit = __emit;\n    // image height\n    let imgH = 500;\n    // database\n    let proteinTable = [];\n    const showBar = ref(false);\n    const showLabel = ref(false);\n    // component show\n    const showImg = ref(false);\n    // data history \n    const dataHistory = ref([]);\n    // current router name\n    const routerName = ref('');\n    // query protein\n    const protein = ref([]);\n    // sorted tags \n    const sortTags = ref([]);\n    // tags\n    const proteinTags = ref([]);\n    const tags = computed(() => {\n      return proteinTags.value.map(item => item.split('(')[0]);\n    });\n    // tags color\n    const tagsColor = [\"#8DD3C7\", \"#EDBC63\", \"#BEBADA\", \"#FB8072\", \"#80B1D3\"];\n    // map html\n    const chart = ref(null);\n    // history\n    const imgs = ref([]);\n    // image object\n    let myChart = null;\n    // tagstotal\n    const tagsTotal = [\"heart\", \"stomach\",\n    //\"skin\",\n    \"blood plasma\", \"brain\", \"kidney\", \"liver\", \"lung\", \"pancreas\", \"spleen\", \"adrenal gland\", \"testis\", \"ovary\",\n    //\"uterus\",\n    \"prostate\", \"colon\", \"esophagus\", \"placenta\"];\n    protein.value = Array.isArray(router.currentRoute.value.query.protein) ? router.currentRoute.value.query.protein : [router.currentRoute.value.query.protein];\n    routerName.value = router.currentRoute.value.name;\n    // get proteins\n    const getProteinTable = async () => {\n      emit('changeLoading');\n      const res = routerName.value === 'tissues' ? await getProteins() : await getCellLineProteins();\n      const byteArray = new Uint8Array(res.data);\n      const data = inflate(byteArray, {\n        to: 'string'\n      });\n      proteinTable = JSON.parse(data);\n      emit('changeLoading');\n      queryProtein(protein);\n    };\n    // delete tag\n    const handleClose = tag => {\n      dataHistory.value.splice(proteinTags.value.indexOf(tag), 1);\n      proteinTags.value.splice(proteinTags.value.indexOf(tag), 1);\n      routerName.value === 'tissues' ? router.push({\n        path: \"/baseline/tissues\",\n        query: {\n          protein: tags.value\n        }\n      }) : router.push({\n        path: \"/baseline/cellline\",\n        query: {\n          protein: tags.value\n        }\n      });\n    };\n    // qeury\n    const queryProtein = input => {\n      if (typeof input.value[0] === \"undefined\") {\n        // init()\n        showImg.value = false;\n        myChart ? myChart.dispose() : myChart;\n        return;\n      }\n      let proteins = proteinTable;\n      input.value.map(protein => {\n        const output = proteins.find(item => {\n          return item.name === protein.trim() || item.gene_name === protein.trim();\n        });\n        if (!output) {\n          alert('Please enter a legal protein name');\n          return;\n        }\n        let tag = `${output.name}(${output.gene_name})`;\n        if (!proteinTags.value.includes(tag.trim())) {\n          if (proteinTags.value.length === 5) {\n            proteinTags.value.shift();\n            proteinTags.value.push(tag);\n            dataHistory.value.shift();\n            dataHistory.value.push(output);\n          } else {\n            proteinTags.value.push(tag);\n            dataHistory.value.push(output);\n          }\n        }\n      });\n      if (proteinTags.value.length != input.value.length) {\n        routerName.value === 'tissues' ? router.push({\n          path: \"/baseline/tissues\",\n          query: {\n            protein: tags.value\n          }\n        }) : router.push({\n          path: \"/baseline/cellline\",\n          query: {\n            protein: tags.value\n          }\n        });\n        //router.push({ path: \"/ae/tissues\", query: { protein: proteinTags.value } })\n      } else {\n        showImg.value = true;\n        imgH = dataHistory.value.length > 1 ? dataHistory.value.length * 400 : 500;\n        nextTick(() => {\n          init();\n        });\n      }\n    };\n    // watch route\n    onBeforeRouteUpdate(to => {\n      protein.value = to.query.protein;\n      queryProtein(protein);\n    });\n\n    // load update\n    onMounted(() => {\n      getProteinTable();\n      window.addEventListener('resize', handleResize);\n    });\n    onUnmounted(() => {\n      if (myChart) {\n        myChart.dispose();\n        myChart = null;\n      }\n      window.removeEventListener('resize', handleResize);\n    });\n\n    // init data\n    const initData = data => {\n      if (routerName.value === 'tissues') {\n        if (data.tags.length < 18) {\n          tagsTotal.map(item => {\n            if (!data.tags.includes(item)) {\n              data.tags.push(item);\n              data.data.push([]);\n            }\n          });\n        }\n      }\n      let dataSort = [];\n      for (let i = 0; i < data.tags.length; i++) {\n        let obj = {};\n        obj['name'] = data.tags[i];\n        obj['data'] = data.data[i].filter(value => value >= 1);\n        dataSort.push(obj);\n      }\n      if (routerName.value !== 'tissues') {\n        dataSort.sort((obja, objb) => {\n          const lena = obja.data.length;\n          const lenb = objb.data.length;\n          return lenb - lena;\n        });\n        dataSort = dataSort.slice(0, 20);\n      }\n      // sort data\n      dataSort.sort((obja, objb) => {\n        /*  \n        objb.data.sort((a, b) => { return a - b })\n        const lena = obja.data.length\n        const lenb = objb.data.length\n        const mida = obja.data[Math.floor(lena / 2)]\n        const midb = objb.data[Math.floor(lenb / 2)] \n        */\n        const mida = obja.data.length > 0 ? obja.data.reduce((a, b) => a + b) / obja.data.length : 0;\n        const midb = obja.data.length > 0 ? objb.data.reduce((a, b) => a + b) / objb.data.length : 0;\n        return mida - midb;\n      });\n      // get sort column\n      let neatData = [];\n      let tags = [];\n      dataSort.map(item => {\n        neatData.push(item.data);\n        tags.push(item.name);\n      });\n      return {\n        neatData,\n        tags\n      };\n    };\n    // init image\n    const init = () => {\n      if (!chart.value || !showImg.value) {\n        return;\n      }\n      if (myChart != null && myChart !== '' && myChart !== undefined) {\n        myChart.dispose(); // discard\n      }\n      try {\n        myChart = echarts.init(chart.value);\n        myChart.clear();\n        if (dataHistory.value.length === 1) {\n          options.dataset = [];\n          options.series = [];\n          options.title = [];\n          options.legend.show = false;\n          let {\n            neatData,\n            tags\n          } = initData(dataHistory.value[0]);\n          sortTags.value = tags;\n          options.title.push({\n            text: dataHistory.value[0].title,\n            left: 'center'\n          });\n          let {\n            samples,\n            data\n          } = countSingleValue(neatData, 2);\n          if (showBar.value) {\n            options.series.push({\n              name: proteinTags.value[0],\n              type: 'bar',\n              data: data,\n              itemStyle: {\n                color: tagsColor[0],\n                color0: '#FA0000',\n                borderColor: '#030609',\n                borderColor0: '#030609'\n              },\n              label: {\n                show: showLabel.value,\n                position: 'right',\n                formatter: function () {\n                  return `samples: ${samples.shift()}`;\n                }\n              }\n            });\n            options.tooltip = {\n              trigger: 'axis',\n              axisPointer: {\n                type: 'shadow'\n              }\n            };\n            options.yAxis.data = sortTags.value;\n          } else {\n            options.dataset.push({\n              source: neatData\n            });\n            options.dataset.push({\n              fromDatasetIndex: 0,\n              transform: {\n                type: 'boxplot',\n                config: {\n                  itemNameFormatter: function (params) {\n                    return tags[params.value];\n                  }\n                }\n              }\n            });\n            options.series.push({\n              name: 'category0',\n              type: 'boxplot',\n              datasetIndex: 1,\n              itemStyle: {\n                color: tagsColor[0],\n                color0: '#FA0000',\n                borderColor: '#030609',\n                borderColor0: '#030609'\n              }\n            });\n            options.tooltip = getBoxTooltips(samples);\n          }\n        } else {\n          if (routerName.value === 'tissues') {\n            sortTags.value = sortTags.value.length === 0 ? initData(dataHistory.value[0]).tags : sortTags.value;\n          } else {\n            sortTags.value = sortTags.value.length === 0 ? initData(dataHistory.value[0]).tags : sortTags.value;\n          }\n          dataHistory.value.length === 0 ? options.title = [] : options.title.splice(0, 1, {\n            text: `Comparison of protein expression in different ${routerName.value}`,\n            left: 'center'\n          });\n          dataHistory.value.length === 0 ? options.legend.show = false : options.legend.show = true;\n          let datas = [];\n          dataHistory.value.map(item => {\n            let data = [];\n            sortTags.value.forEach(tissue => {\n              if (!item.tags.includes(tissue)) {\n                data.push([]);\n              } else {\n                let index = item.tags.indexOf(tissue);\n                let rowArr = item.data[index].filter(v => v >= 1);\n                data.push(rowArr);\n              }\n            });\n            datas.push(data);\n          });\n          let {\n            samples,\n            data\n          } = countSingleValue(datas, 3);\n          if (showBar.value) {\n            datas = data;\n            options.dataset = [];\n            options.series = [];\n            options.legend.data = [];\n            datas.forEach((item, index) => {\n              options.series.push({\n                name: proteinTags.value[index],\n                type: 'bar',\n                data: item,\n                itemStyle: {\n                  color: tagsColor[index],\n                  color0: '#FA0000',\n                  borderColor: '#030609',\n                  borderColor0: '#030609'\n                },\n                label: {\n                  show: showLabel.value,\n                  position: 'right',\n                  formatter: function () {\n                    return `samples: ${samples[index].shift()}`;\n                  }\n                }\n              });\n              options.legend.data.push({\n                name: proteinTags.value[index],\n                itemStyle: {\n                  color: tagsColor[index],\n                  borderColor: tagsColor[index]\n                }\n              });\n            });\n            options.tooltip = {\n              trigger: 'axis',\n              axisPointer: {\n                type: 'shadow'\n              }\n            };\n            options.yAxis.data = sortTags.value;\n          } else {\n            options.dataset = [];\n            options.series = [];\n            options.legend.data = [];\n            datas.forEach((item, index) => {\n              options.dataset.push({\n                source: item\n              });\n              options.series.push({\n                name: proteinTags.value[index],\n                type: 'boxplot',\n                datasetIndex: datas.length + index,\n                itemStyle: {\n                  color: tagsColor[index],\n                  color0: '#FA0000',\n                  borderColor: '#030609',\n                  borderColor0: '#030609'\n                }\n              });\n              options.legend.data.push({\n                name: proteinTags.value[index],\n                itemStyle: {\n                  color: tagsColor[index],\n                  borderColor: tagsColor[index]\n                }\n              });\n            });\n            datas.forEach((item, index) => {\n              options.dataset.push({\n                fromDatasetIndex: index,\n                transform: {\n                  type: 'boxplot',\n                  config: {\n                    itemNameFormatter: function (params) {\n                      return sortTags.value[params.value];\n                    }\n                  }\n                }\n              });\n            });\n            options.tooltip = getBoxTooltips(samples);\n          }\n        }\n        myChart.resize({\n          height: imgH\n        });\n        myChart.setOption(options);\n\n        // Handle image capture\n        nextTick(() => {\n          if (protein.value.length !== 0) {\n            let imgDataUrl = myChart.getDataURL({\n              type: 'svg',\n              pixelRatio: 2,\n              backgroundColor: '#fff',\n              excludeComponents: ['toolbox']\n            });\n            let urlFile = {\n              proteinName: protein.value,\n              url: imgDataUrl\n            };\n            imgs.value.unshift(urlFile);\n          }\n        });\n      } catch (error) {\n        console.error('Chart initialization failed:', error);\n      }\n    };\n    // count single value\n    const countSingleValue = (data, dimension) => {\n      if (dimension === 2) {\n        /*\n        let singleNum = data.filter((arr) => arr.length == 1).length\n        if (singleNum >= 10) {\n          data = data.map((arr) => Number((arr.reduce((a, b)=>a+b)/arr.length).toFixed(2)))\n        }\n        return { singleNum, data } \n        */\n        let samples = data.map(arr => arr.length);\n        data = data.map(arr => arr.length > 0 ? Number((arr.reduce((a, b) => a + b) / arr.length).toFixed(2)) : 0);\n        return {\n          samples,\n          data\n        };\n      } else {\n        /*\n        let singleNum = data[0].filter((arr) => arr.length == 1).length\n        if (singleNum >= 10) {\n          data = data.map((res) => res.map((arr) => arr.length > 0 ? Number((arr.reduce((a, b)=>a+b)/arr.length).toFixed(2)) : 0))\n        }\n        return { singleNum, data } \n        */\n        let samples = data.map(res => res.map(arr => arr.length));\n        data = data.map(res => res.map(arr => arr.length > 0 ? Number((arr.reduce((a, b) => a + b) / arr.length).toFixed(2)) : 0));\n        return {\n          samples,\n          data\n        };\n      }\n    };\n\n    //\n    const changeShowBar = () => {\n      init();\n    };\n    const changeShowLabel = () => {\n      init();\n    };\n\n    // Add resize handler\n    const handleResize = () => {\n      if (myChart) {\n        myChart.resize();\n      }\n    };\n    return (_ctx, _cache) => {\n      const _component_el_switch = _resolveComponent(\"el-switch\");\n      const _component_el_tag = _resolveComponent(\"el-tag\");\n      const _component_el_text = _resolveComponent(\"el-text\");\n      const _component_el_image = _resolveComponent(\"el-image\");\n      const _component_el_drawer = _resolveComponent(\"el-drawer\");\n      return _withDirectives((_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_cache[4] || (_cache[4] = _createElementVNode(\"h1\", {\n        class: \"organism-title\"\n      }, [_createTextVNode(\"Organism: \"), _createElementVNode(\"span\", {\n        class: \"organism-name\"\n      }, \"Homo sapiens\")], -1)), _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_switch, {\n        modelValue: showBar.value,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => showBar.value = $event),\n        class: \"visualization-switch\",\n        \"inline-prompt\": \"\",\n        \"active-text\": \"Bar\",\n        \"inactive-text\": \"Box\",\n        onChange: changeShowBar\n      }, null, 8, [\"modelValue\"]), _withDirectives(_createVNode(_component_el_switch, {\n        modelValue: showLabel.value,\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => showLabel.value = $event),\n        class: \"visualization-switch label-switch\",\n        \"inline-prompt\": \"\",\n        \"active-text\": \"Show label\",\n        \"inactive-text\": \"Off label\",\n        onChange: changeShowLabel\n      }, null, 8, [\"modelValue\"]), [[_vShow, showBar.value]])])]), _createElementVNode(\"div\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(proteinTags.value, (item, index) => {\n        return _openBlock(), _createBlock(_component_el_tag, {\n          key: index,\n          round: \"\",\n          closable: \"\",\n          color: tagsColor[index],\n          onClose: $event => handleClose(item),\n          class: \"protein-tag\"\n        }, {\n          default: _withCtx(() => [_createTextVNode(_toDisplayString(item), 1)]),\n          _: 2\n        }, 1032, [\"color\", \"onClose\"]);\n      }), 128))]), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_el_text, {\n        class: \"history-button\",\n        type: \"info\",\n        onClick: _cache[2] || (_cache[2] = $event => drawer.value = true)\n      }, {\n        default: _withCtx(() => _cache[5] || (_cache[5] = [_createTextVNode(\" History \")])),\n        _: 1,\n        __: [5]\n      }), _createVNode(_component_el_drawer, {\n        modelValue: drawer.value,\n        \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => drawer.value = $event),\n        title: \"Visualization History\",\n        size: \"50%\"\n      }, {\n        default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_7, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(imgs.value, (item, index) => {\n          return _openBlock(), _createElementBlock(\"div\", {\n            key: index,\n            class: \"history-item\"\n          }, [_createElementVNode(\"h5\", _hoisted_8, _toDisplayString(item.proteinName.join(', ')), 1), _createVNode(_component_el_image, {\n            class: \"history-image\",\n            src: item.url,\n            fit: \"contain\",\n            \"preview-src-list\": [item.url]\n          }, null, 8, [\"src\", \"preview-src-list\"])]);\n        }), 128))])]),\n        _: 1\n      }, 8, [\"modelValue\"])])]), _createElementVNode(\"div\", _hoisted_9, [_createElementVNode(\"div\", {\n        ref_key: \"chart\",\n        ref: chart,\n        class: \"chart-container\",\n        style: _normalizeStyle({\n          height: _unref(imgH) + 'px'\n        })\n      }, null, 4)])], 512)), [[_vShow, showImg.value]]);\n    };\n  }\n};","/* unplugin-vue-components disabled */import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=4a389306&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4a389306\"]])\n\nexport default __exports__"],"names":["getProteins","request","method","url","responseType","getCellLineProteins","getBoxTooltips","samples","trigger","axisPointer","type","textStyle","formatter","param","data","parseFloat","toFixed","Array","isArray","componentIndex","dataIndex","join","options","title","dataset","tooltip","legend","show","orient","right","top","grid","left","bottom","yAxis","boundaryGap","nameGap","splitArea","splitLine","xAxis","name","nameLocation","min","toolbox","feature","saveAsImage","pixelRatio","series","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","__name","emits","setup","__props","emit","__emit","router","drawer","imgH","proteinTable","showBar","showLabel","showImg","dataHistory","routerName","protein","sortTags","proteinTags","tags","value","map","item","split","tagsColor","chart","imgs","myChart","tagsTotal","currentRoute","query","getProteinTable","async","res","byteArray","Uint8Array","to","JSON","parse","queryProtein","handleClose","tag","splice","indexOf","push","path","input","dispose","proteins","output","find","trim","gene_name","alert","includes","length","shift","init","window","addEventListener","handleResize","removeEventListener","initData","dataSort","i","obj","filter","sort","obja","objb","lena","lenb","slice","mida","reduce","a","b","midb","neatData","undefined","echarts","clear","text","countSingleValue","itemStyle","color","color0","borderColor","borderColor0","label","position","source","fromDatasetIndex","transform","config","itemNameFormatter","params","datasetIndex","datas","forEach","tissue","index","rowArr","v","resize","height","setOption","imgDataUrl","getDataURL","backgroundColor","excludeComponents","urlFile","proteinName","unshift","error","console","dimension","arr","Number","changeShowBar","changeShowLabel","_ctx","_cache","_component_el_switch","_component_el_tag","_component_el_text","_component_el_image","_component_el_drawer","modelValue","$event","onChange","key","round","closable","onClose","default","_","onClick","__","size","src","fit","ref_key","ref","style","__exports__"],"sourceRoot":""}