{"version":3,"file":"js/781.190b6cbe.js","mappings":"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","sources":["webpack://quantms.org/./src/api/getTable.js","webpack://quantms.org/./src/views/home/index.vue","webpack://quantms.org/./src/views/home/index.vue?12f0"],"sourcesContent":["import request from './request'\n\nexport const getAbsolueExpression = () => {\n  return request({\n    url: '/data/AE.json',\n    method: 'get'\n  })\n}\nexport const getDifferentialExpression = () => {\n  return request(\n    {\n      url: '/data/DE.json',\n      method: 'get'\n    })\n}\nexport const getSingleCellExpression = () => {\n  return request(\n    {\n      url: '/data/single_cell.json',\n      method: 'get'\n    })\n}\n","import { unref as _unref, createVNode as _createVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home-page\"\n};\nconst _hoisted_2 = {\n  class: \"feature-section\"\n};\nconst _hoisted_3 = {\n  class: \"grid grid-4\"\n};\nconst _hoisted_4 = {\n  class: \"feature-card workflow-card\"\n};\nconst _hoisted_5 = {\n  href: \"https://docs.quantms.org/en/latest/\",\n  class: \"feature-link\"\n};\nconst _hoisted_6 = {\n  class: \"feature-card datasets-card\"\n};\nconst _hoisted_7 = {\n  class: \"feature-card baseline-card\"\n};\nconst _hoisted_8 = {\n  class: \"feature-card publications-card\"\n};\nconst _hoisted_9 = {\n  class: \"intro-section card\"\n};\nconst _hoisted_10 = {\n  class: \"intro-content\"\n};\nconst _hoisted_11 = {\n  class: \"pipeline-image-container\"\n};\nconst _hoisted_12 = [\"src\"];\nconst _hoisted_13 = {\n  class: \"visualization-section\"\n};\nconst _hoisted_14 = {\n  class: \"grid grid-3\"\n};\nconst _hoisted_15 = {\n  class: \"visualization-card\"\n};\nconst _hoisted_16 = {\n  class: \"visualization-card\"\n};\nconst _hoisted_17 = {\n  class: \"visualization-card\"\n};\nimport pipeline from \"@/assets/images/pipeline.png\";\nimport { Tools, DocumentCopy, Histogram, Document } from \"@element-plus/icons-vue\";\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport * as echarts from 'echarts';\nimport { getAbsolueExpression, getDifferentialExpression, getSingleCellExpression } from \"@/api/getTable\";\nimport axios from 'axios';\nimport pako from 'pako';\n\n// Chart references\n\nexport default {\n  __name: 'index',\n  setup(__props) {\n    const proteinsPerProjectChart = ref(null);\n    const peptidesPerProjectChart = ref(null);\n    const proteinsPerTissueChart = ref(null);\n\n    // Chart instances\n    let proteinsPerProjectInstance = null;\n    let peptidesPerProjectInstance = null;\n    let proteinsPerTissueInstance = null;\n\n    // Data storage\n    const aeData = ref([]);\n    const deData = ref([]);\n    const singleCellData = ref([]);\n    const tissueData = ref([]);\n\n    // Fetch all data\n    const fetchData = async () => {\n      try {\n        // Fetch AE, DE, and single cell data\n        const [aeResponse, deResponse, singleCellResponse] = await Promise.all([getAbsolueExpression(), getDifferentialExpression(), getSingleCellExpression()]);\n        aeData.value = aeResponse.data;\n        deData.value = deResponse.data;\n        singleCellData.value = singleCellResponse.data;\n\n        // Fetch tissue data (compressed)\n        try {\n          const tissueResponse = await axios.get('/data/tissueJson.json.gz', {\n            responseType: 'arraybuffer'\n          });\n          const decompressed = pako.inflate(new Uint8Array(tissueResponse.data), {\n            to: 'string'\n          });\n          tissueData.value = JSON.parse(decompressed);\n          console.log('Tissue data loaded:', tissueData.value.length, 'proteins');\n        } catch (error) {\n          console.error('Error loading tissue data:', error);\n          // Fallback to a simple array if tissue data can't be loaded\n          tissueData.value = [{\n            name: \"Protein1\",\n            tags: [\"brain\", \"heart\", \"liver\", \"kidney\", \"lung\"],\n            data: [[5.5], [5.6], [5.7], [5.8], [5.9]]\n          }, {\n            name: \"Protein2\",\n            tags: [\"brain\", \"heart\", \"liver\", \"kidney\"],\n            data: [[5.5], [5.6], [5.7], [5.8]]\n          }, {\n            name: \"Protein3\",\n            tags: [\"brain\", \"heart\", \"liver\"],\n            data: [[5.5], [5.6], [5.7]]\n          }, {\n            name: \"Protein4\",\n            tags: [\"brain\", \"heart\"],\n            data: [[5.5], [5.6]]\n          }, {\n            name: \"Protein5\",\n            tags: [\"brain\"],\n            data: [[5.5]]\n          }];\n        }\n\n        // Initialize charts\n        initCharts();\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    // Initialize all charts\n    const initCharts = () => {\n      if (proteinsPerProjectChart.value) {\n        proteinsPerProjectInstance = echarts.init(proteinsPerProjectChart.value);\n        initProteinsPerProjectChart();\n      }\n      if (peptidesPerProjectChart.value) {\n        peptidesPerProjectInstance = echarts.init(peptidesPerProjectChart.value);\n        initPeptidesPerProjectChart();\n      }\n      if (proteinsPerTissueChart.value) {\n        proteinsPerTissueInstance = echarts.init(proteinsPerTissueChart.value);\n        initProteinsPerTissueChart();\n      }\n    };\n\n    // Initialize proteins per project chart\n    const initProteinsPerProjectChart = () => {\n      if (!proteinsPerProjectInstance) return;\n\n      // Combine all datasets\n      const allData = [...aeData.value, ...deData.value, ...singleCellData.value];\n      const proteinCounts = allData.map(item => item.proteins);\n\n      // Create bins for histogram\n      const bins = [0, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 15000];\n      const counts = Array(bins.length).fill(0);\n      proteinCounts.forEach(count => {\n        for (let i = 0; i < bins.length; i++) {\n          if (i === bins.length - 1 || count >= bins[i] && count < bins[i + 1]) {\n            counts[i]++;\n            break;\n          }\n        }\n      });\n\n      // Format bin labels with K for thousands\n      const binLabels = bins.map((bin, index) => {\n        const formatNumber = num => num >= 1000 ? `${num / 1000}K` : num;\n        if (index === bins.length - 1) return `${formatNumber(bin)}+`;\n        return `${formatNumber(bin)}-${formatNumber(bins[index + 1])}`;\n      });\n      const option = {\n        tooltip: {\n          trigger: 'axis',\n          formatter: '{b}: {c} projects',\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\n          borderColor: '#ccc',\n          borderWidth: 1,\n          textStyle: {\n            color: '#666'\n          }\n        },\n        grid: {\n          left: '12%',\n          right: '8%',\n          bottom: '15%',\n          top: '10%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: binLabels,\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#ddd'\n            }\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            rotate: 45,\n            fontSize: 11,\n            margin: 12,\n            color: '#666',\n            formatter: value => value.replace('-', ' - ')\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: 'Projects',\n          nameLocation: 'middle',\n          nameGap: 40,\n          nameTextStyle: {\n            fontSize: 13,\n            fontWeight: 'bold',\n            color: '#666'\n          },\n          axisLabel: {\n            fontSize: 11,\n            color: '#666'\n          },\n          splitLine: {\n            lineStyle: {\n              type: 'dashed',\n              color: '#eee'\n            }\n          }\n        },\n        series: [{\n          data: counts,\n          type: 'bar',\n          itemStyle: {\n            color: '#389a99',\n            borderRadius: [4, 4, 0, 0]\n          },\n          barWidth: '60%',\n          emphasis: {\n            itemStyle: {\n              color: '#2a7372'\n            }\n          },\n          label: {\n            show: true,\n            position: 'top',\n            fontSize: 11,\n            color: '#666'\n          }\n        }]\n      };\n      proteinsPerProjectInstance.setOption(option);\n    };\n\n    // Initialize peptides per project chart\n    const initPeptidesPerProjectChart = () => {\n      if (!peptidesPerProjectInstance) return;\n\n      // Combine all datasets\n      const allData = [...aeData.value, ...deData.value, ...singleCellData.value];\n      const peptideCounts = allData.map(item => item.peptides);\n\n      // Create bins for histogram\n      const bins = [0, 10000, 20000, 50000, 100000, 150000, 200000, 250000, 300000, 500000];\n      const counts = Array(bins.length).fill(0);\n      peptideCounts.forEach(count => {\n        for (let i = 0; i < bins.length; i++) {\n          if (i === bins.length - 1 || count >= bins[i] && count < bins[i + 1]) {\n            counts[i]++;\n            break;\n          }\n        }\n      });\n\n      // Format bin labels with K for thousands\n      const binLabels = bins.map((bin, index) => {\n        const formatNumber = num => num >= 1000 ? `${num / 1000}K` : num;\n        if (index === bins.length - 1) return `${formatNumber(bin)}+`;\n        return `${formatNumber(bin)}-${formatNumber(bins[index + 1])}`;\n      });\n      const option = {\n        tooltip: {\n          trigger: 'axis',\n          formatter: '{b}: {c} projects',\n          backgroundColor: 'rgba(255, 255, 255, 0.9)',\n          borderColor: '#ccc',\n          borderWidth: 1,\n          textStyle: {\n            color: '#666'\n          }\n        },\n        grid: {\n          left: '12%',\n          right: '8%',\n          bottom: '15%',\n          top: '10%',\n          containLabel: true\n        },\n        xAxis: {\n          type: 'category',\n          data: binLabels,\n          axisLine: {\n            show: true,\n            lineStyle: {\n              color: '#ddd'\n            }\n          },\n          axisTick: {\n            show: false\n          },\n          axisLabel: {\n            rotate: 45,\n            fontSize: 11,\n            margin: 12,\n            color: '#666',\n            formatter: value => value.replace('-', ' - ')\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: 'Projects',\n          nameLocation: 'middle',\n          nameGap: 40,\n          nameTextStyle: {\n            fontSize: 13,\n            fontWeight: 'bold',\n            color: '#666'\n          },\n          axisLabel: {\n            fontSize: 11,\n            color: '#666'\n          },\n          splitLine: {\n            lineStyle: {\n              type: 'dashed',\n              color: '#eee'\n            }\n          }\n        },\n        series: [{\n          data: counts,\n          type: 'bar',\n          itemStyle: {\n            color: '#2563eb',\n            borderRadius: [4, 4, 0, 0]\n          },\n          barWidth: '60%',\n          emphasis: {\n            itemStyle: {\n              color: '#1d4ed8'\n            }\n          },\n          label: {\n            show: true,\n            position: 'top',\n            fontSize: 11,\n            color: '#666'\n          }\n        }]\n      };\n      peptidesPerProjectInstance.setOption(option);\n    };\n\n    // Initialize proteins per tissue chart\n    const initProteinsPerTissueChart = () => {\n      if (!proteinsPerTissueInstance || !tissueData.value || !tissueData.value.length) return;\n\n      // Process tissue data - count proteins per tissue\n      const tissueProteins = {};\n\n      // Count proteins for each tissue\n      tissueData.value.forEach(protein => {\n        if (protein.tags && Array.isArray(protein.tags)) {\n          protein.tags.forEach(tissue => {\n            if (!tissueProteins[tissue]) {\n              tissueProteins[tissue] = 1;\n            } else {\n              tissueProteins[tissue]++;\n            }\n          });\n        }\n      });\n\n      // Convert to array and sort by protein count\n      const processedTissueData = Object.entries(tissueProteins).map(([tissue, count]) => ({\n        tissue,\n        proteins: count\n      })).sort((a, b) => b.proteins - a.proteins);\n      const option = {\n        tooltip: {\n          trigger: 'item',\n          formatter: params => {\n            const value = params.value >= 1000 ? `${(params.value / 1000).toFixed(1)}K` : params.value;\n            const name = params.name.charAt(0).toUpperCase() + params.name.slice(1);\n            return `${name}: ${value} proteins (${params.percent.toFixed(1)}%)`;\n          },\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\n          borderColor: '#ccc',\n          borderWidth: 1,\n          padding: [8, 12],\n          textStyle: {\n            color: '#666',\n            fontSize: 13\n          }\n        },\n        series: [{\n          type: 'pie',\n          radius: ['30%', '70%'],\n          center: ['50%', '45%'],\n          avoidLabelOverlap: true,\n          itemStyle: {\n            borderRadius: 4,\n            borderColor: '#fff',\n            borderWidth: 2\n          },\n          label: {\n            show: false\n          },\n          emphasis: {\n            scale: true,\n            scaleSize: 5,\n            itemStyle: {\n              shadowBlur: 10,\n              shadowOffsetX: 0,\n              shadowColor: 'rgba(0, 0, 0, 0.2)'\n            }\n          },\n          data: processedTissueData.map(item => ({\n            name: item.tissue,\n            value: item.proteins\n          }))\n        }]\n      };\n      proteinsPerTissueInstance.setOption(option);\n    };\n\n    // Handle window resize\n    const handleResize = () => {\n      if (proteinsPerProjectInstance) {\n        proteinsPerProjectInstance.resize();\n      }\n      if (peptidesPerProjectInstance) {\n        peptidesPerProjectInstance.resize();\n      }\n      if (proteinsPerTissueInstance) {\n        proteinsPerTissueInstance.resize();\n      }\n    };\n\n    // Lifecycle hooks\n    onMounted(() => {\n      fetchData();\n      window.addEventListener('resize', handleResize);\n    });\n\n    // Clean up on component unmount\n    onUnmounted(() => {\n      window.removeEventListener('resize', handleResize);\n      proteinsPerProjectInstance?.dispose();\n      peptidesPerProjectInstance?.dispose();\n      proteinsPerTissueInstance?.dispose();\n    });\n    return (_ctx, _cache) => {\n      const _component_el_icon = _resolveComponent(\"el-icon\");\n      const _component_router_link = _resolveComponent(\"router-link\");\n      return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"section\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"a\", _hoisted_5, [_createVNode(_component_el_icon, {\n        size: \"60px\",\n        class: \"workflow-icon\"\n      }, {\n        default: _withCtx(() => [_createVNode(_unref(Tools))]),\n        _: 1\n      }), _cache[0] || (_cache[0] = _createElementVNode(\"h2\", {\n        class: \"feature-title\"\n      }, \"Workflow\", -1)), _cache[1] || (_cache[1] = _createElementVNode(\"p\", {\n        class: \"feature-description\"\n      }, \" Explore the quantMS workflow documentation \", -1))])]), _createElementVNode(\"div\", _hoisted_6, [_createVNode(_component_router_link, {\n        to: \"/datasets\",\n        class: \"feature-link\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_icon, {\n          size: \"60px\",\n          class: \"datasets-icon\"\n        }, {\n          default: _withCtx(() => [_createVNode(_unref(DocumentCopy))]),\n          _: 1\n        }), _cache[2] || (_cache[2] = _createElementVNode(\"h2\", {\n          class: \"feature-title\"\n        }, \"Datasets\", -1)), _cache[3] || (_cache[3] = _createElementVNode(\"p\", {\n          class: \"feature-description\"\n        }, \" Browse available datasets and resources \", -1))]),\n        _: 1,\n        __: [2, 3]\n      })]), _createElementVNode(\"div\", _hoisted_7, [_createVNode(_component_router_link, {\n        to: \"/baseline\",\n        class: \"feature-link\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_icon, {\n          size: \"60px\",\n          class: \"baseline-icon\"\n        }, {\n          default: _withCtx(() => [_createVNode(_unref(Histogram))]),\n          _: 1\n        }), _cache[4] || (_cache[4] = _createElementVNode(\"h2\", {\n          class: \"feature-title\"\n        }, \"Baseline\", -1)), _cache[5] || (_cache[5] = _createElementVNode(\"p\", {\n          class: \"feature-description\"\n        }, \" View baseline analysis and results \", -1))]),\n        _: 1,\n        __: [4, 5]\n      })]), _createElementVNode(\"div\", _hoisted_8, [_createVNode(_component_router_link, {\n        to: \"/publications\",\n        class: \"feature-link\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_el_icon, {\n          size: \"60px\",\n          class: \"publications-icon\"\n        }, {\n          default: _withCtx(() => [_createVNode(_unref(Document))]),\n          _: 1\n        }), _cache[6] || (_cache[6] = _createElementVNode(\"h2\", {\n          class: \"feature-title\"\n        }, \"Publications\", -1)), _cache[7] || (_cache[7] = _createElementVNode(\"p\", {\n          class: \"feature-description\"\n        }, \" View scientific publications related to quantMS \", -1))]),\n        _: 1,\n        __: [6, 7]\n      })])])]), _createElementVNode(\"section\", _hoisted_9, [_createElementVNode(\"div\", _hoisted_10, [_cache[8] || (_cache[8] = _createElementVNode(\"h1\", {\n        class: \"section-title\"\n      }, \"Introduction\", -1)), _cache[9] || (_cache[9] = _createElementVNode(\"p\", {\n        class: \"intro-text\"\n      }, [_createElementVNode(\"a\", {\n        href: \"https://quantms.readthedocs.io/en/latest/\",\n        class: \"text-primary\"\n      }, \"quantms\"), _createTextVNode(\" is a bioinformatics best-practice analysis pipeline for Quantitative Mass Spectrometry (MS), including: DDA-LFQ, plexDDA (e.g. TMT, iTRAQ), and DIA. \")], -1)), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"img\", {\n        src: _unref(pipeline),\n        alt: \"QuantMS Pipeline\",\n        class: \"pipeline-image\"\n      }, null, 8, _hoisted_12)]), _cache[10] || (_cache[10] = _createElementVNode(\"h2\", {\n        class: \"citation-title\"\n      }, \"Citing quantms\", -1)), _cache[11] || (_cache[11] = _createElementVNode(\"blockquote\", {\n        class: \"citation-block\"\n      }, [_createTextVNode(\" Dai C, Pfeuffer J, Wang H, Zheng P, Käll L, Sachsenberg T, Demichev V, Bai M, Kohlbacher O, Perez-Riverol Y. quantms: a cloud-based pipeline for quantitative proteomics enables the reanalysis of public proteomics data. Nat Methods. 2024 Sep;21(9):1603-1607. doi: 10.1038/s41592-024-02343-1. Epub 2024 Jul 4. PMID: 38965444; PMCID: PMC11399091. \"), _createElementVNode(\"a\", {\n        href: \"https://doi.org/10.1038/s41592-024-02343-1\",\n        class: \"citation-link\"\n      }, \" [https://doi.org/10.1038/s41592-024-02343-1] \")], -1))])]), _createElementVNode(\"section\", _hoisted_13, [_createElementVNode(\"div\", _hoisted_14, [_createElementVNode(\"div\", _hoisted_15, [_cache[12] || (_cache[12] = _createElementVNode(\"h3\", {\n        class: \"chart-title\"\n      }, \"Proteins per Project\", -1)), _createElementVNode(\"div\", {\n        ref_key: \"proteinsPerProjectChart\",\n        ref: proteinsPerProjectChart,\n        class: \"chart-container\"\n      }, null, 512)]), _createElementVNode(\"div\", _hoisted_16, [_cache[13] || (_cache[13] = _createElementVNode(\"h3\", {\n        class: \"chart-title\"\n      }, \"Peptides per Project\", -1)), _createElementVNode(\"div\", {\n        ref_key: \"peptidesPerProjectChart\",\n        ref: peptidesPerProjectChart,\n        class: \"chart-container\"\n      }, null, 512)]), _createElementVNode(\"div\", _hoisted_17, [_cache[14] || (_cache[14] = _createElementVNode(\"h3\", {\n        class: \"chart-title\"\n      }, \"Proteins per Tissue\", -1)), _createElementVNode(\"div\", {\n        ref_key: \"proteinsPerTissueChart\",\n        ref: proteinsPerTissueChart,\n        class: \"chart-container\"\n      }, null, 512)])])])]);\n    };\n  }\n};","/* unplugin-vue-components disabled */import script from \"./index.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./index.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./index.vue?vue&type=style&index=0&id=156f9265&lang=scss&scoped=true\"\n\nimport exportComponent from \"../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-156f9265\"]])\n\nexport default __exports__"],"names":["getAbsolueExpression","request","url","method","getDifferentialExpression","getSingleCellExpression","_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","href","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","__name","setup","__props","proteinsPerProjectChart","peptidesPerProjectChart","proteinsPerTissueChart","proteinsPerProjectInstance","peptidesPerProjectInstance","proteinsPerTissueInstance","aeData","deData","singleCellData","tissueData","fetchData","async","aeResponse","deResponse","singleCellResponse","Promise","all","value","data","tissueResponse","axios","get","responseType","decompressed","Uint8Array","to","JSON","parse","console","log","length","error","name","tags","initCharts","echarts","initProteinsPerProjectChart","initPeptidesPerProjectChart","initProteinsPerTissueChart","allData","proteinCounts","map","item","proteins","bins","counts","Array","fill","forEach","count","i","binLabels","bin","index","formatNumber","num","option","tooltip","trigger","formatter","backgroundColor","borderColor","borderWidth","textStyle","color","grid","left","right","bottom","top","containLabel","xAxis","type","axisLine","show","lineStyle","axisTick","axisLabel","rotate","fontSize","margin","replace","yAxis","nameLocation","nameGap","nameTextStyle","fontWeight","splitLine","series","itemStyle","borderRadius","barWidth","emphasis","label","position","setOption","peptideCounts","peptides","tissueProteins","protein","isArray","tissue","processedTissueData","Object","entries","sort","a","b","params","toFixed","charAt","toUpperCase","slice","percent","padding","radius","center","avoidLabelOverlap","scale","scaleSize","shadowBlur","shadowOffsetX","shadowColor","handleResize","resize","window","addEventListener","removeEventListener","dispose","_ctx","_cache","_component_el_icon","_component_router_link","size","default","Tools","_","DocumentCopy","__","Histogram","Document","src","alt","ref_key","ref","__exports__"],"sourceRoot":""}