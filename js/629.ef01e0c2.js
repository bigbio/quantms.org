"use strict";(self["webpackChunkquantms_org"]=self["webpackChunkquantms_org"]||[]).push([[629],{3015:(e,t,a)=>{a.r(t),a.d(t,{default:()=>R});var s=a(1361),i=(a(6422),a(641)),r=a(953);const l=a.p+"img/pipeline.95e30702.png";var n=a(8548),o=a(6744),c=a(5056),d=a(4335),u=a(3075);const p={class:"home-page"},f={class:"feature-section"},h={class:"grid grid-4"},g={class:"feature-card workflow-card"},k={href:"https://docs.quantms.org/en/latest/",class:"feature-link"},b={class:"feature-card datasets-card"},m={class:"feature-card baseline-card"},v={class:"feature-card publications-card"},L={class:"intro-section card"},y={class:"intro-content"},x={class:"pipeline-image-container"},P=["src"],w={class:"visualization-section"},z={class:"grid grid-3"},S={class:"visualization-card"},_={class:"visualization-card"},A={class:"visualization-card"},T={__name:"index",setup(e){const t=(0,r.KR)(null),a=(0,r.KR)(null),T=(0,r.KR)(null);let D=null,F=null,R=null;const j=(0,r.KR)([]),q=(0,r.KR)([]),E=(0,r.KR)([]),C=(0,r.KR)([]),M=async()=>{try{const[t,a,s]=await Promise.all([(0,c.uh)(),(0,c.sd)(),(0,c.Fq)()]);j.value=t.data,q.value=a.data,E.value=s.data;try{const e=await d.A.get("/data/tissueJson.json.gz",{responseType:"arraybuffer"}),t=u.Ay.inflate(new Uint8Array(e.data),{to:"string"});C.value=JSON.parse(t),console.log("Tissue data loaded:",C.value.length,"proteins")}catch(e){console.error("Error loading tissue data:",e),C.value=[{name:"Protein1",tags:["brain","heart","liver","kidney","lung"],data:[[5.5],[5.6],[5.7],[5.8],[5.9]]},{name:"Protein2",tags:["brain","heart","liver","kidney"],data:[[5.5],[5.6],[5.7],[5.8]]},{name:"Protein3",tags:["brain","heart","liver"],data:[[5.5],[5.6],[5.7]]},{name:"Protein4",tags:["brain","heart"],data:[[5.5],[5.6]]},{name:"Protein5",tags:["brain"],data:[[5.5]]}]}K()}catch(e){console.error("Error fetching data:",e)}},K=()=>{W(),O(),$()},W=()=>{if(!t.value)return;const e=[...j.value,...q.value,...E.value],a=e.map((e=>e.proteins)),s=[0,1e3,2e3,3e3,4e3,5e3,6e3,7e3,8e3,9e3,1e4,15e3],i=Array(s.length).fill(0);a.forEach((e=>{for(let t=0;t<s.length;t++)if(t===s.length-1||e>=s[t]&&e<s[t+1]){i[t]++;break}}));const r=s.map(((e,t)=>t===s.length-1?`${e}+`:`${e}-${s[t+1]}`));D=o.Ts(t.value);const l={tooltip:{trigger:"axis",formatter:"{b}: {c} projects"},grid:{left:"10%",right:"5%",bottom:"10%",top:"5%",containLabel:!0},xAxis:{type:"category",data:r,axisLine:{show:!1},axisTick:{show:!1},axisLabel:{rotate:45,fontSize:10,margin:8}},yAxis:{type:"value",name:"Projects",nameLocation:"middle",nameGap:30,axisLabel:{fontSize:10},nameTextStyle:{fontSize:12,fontWeight:"bold"},splitLine:{lineStyle:{type:"dashed",opacity:.3}}},series:[{data:i,type:"bar",itemStyle:{color:"#389a99"},barWidth:"60%"}]};D.setOption(l)},O=()=>{if(!a.value)return;const e=[...j.value,...q.value,...E.value],t=e.map((e=>e.peptides)),s=[0,1e4,2e4,5e4,1e5,15e4,2e5,25e4,3e5,5e5],i=Array(s.length).fill(0);t.forEach((e=>{for(let t=0;t<s.length;t++)if(t===s.length-1||e>=s[t]&&e<s[t+1]){i[t]++;break}}));const r=s.map(((e,t)=>t===s.length-1?`${e}+`:`${e}-${s[t+1]}`));F=o.Ts(a.value);const l={tooltip:{trigger:"axis",formatter:"{b}: {c} projects"},grid:{left:"10%",right:"5%",bottom:"10%",top:"5%",containLabel:!0},xAxis:{type:"category",data:r,axisLine:{show:!1},axisTick:{show:!1},axisLabel:{rotate:45,fontSize:10,margin:8}},yAxis:{type:"value",name:"Number of Projects",nameLocation:"middle",nameGap:40,axisLabel:{fontSize:10},nameTextStyle:{fontSize:12}},series:[{data:i,type:"bar",itemStyle:{color:"#2563eb"},barWidth:"60%"}]};F.setOption(l)},$=()=>{if(!T.value||!C.value||!C.value.length)return;const e={};C.value.forEach((t=>{t.tags&&Array.isArray(t.tags)&&t.tags.forEach((t=>{e[t]?e[t]++:e[t]=1}))}));const t=Object.entries(e).map((([e,t])=>({tissue:e,proteins:t}))).sort(((e,t)=>t.proteins-e.proteins)).slice(0,15);R=o.Ts(T.value);const a={tooltip:{trigger:"axis",formatter:"{b}: {c} proteins"},grid:{left:"15%",right:"5%",bottom:"5%",top:"5%",containLabel:!0},xAxis:{type:"value",axisLine:{show:!1},axisTick:{show:!1},axisLabel:{fontSize:10,margin:8},splitLine:{lineStyle:{type:"dashed",opacity:.3}}},yAxis:{type:"category",data:t.map((e=>e.tissue)),axisLabel:{fontSize:10,margin:8},axisTick:{show:!1}},series:[{data:t.map((e=>e.proteins)),type:"bar",itemStyle:{color:"#4b8f73"},barWidth:"60%",label:{show:!0,position:"right",fontSize:10,color:"#666"}}]};R.setOption(a)},I=()=>{D?.resize(),F?.resize(),R?.resize()};return(0,i.sV)((()=>{M(),window.addEventListener("resize",I)})),(e,o)=>{const c=s.tk,d=(0,i.g2)("router-link");return(0,i.uX)(),(0,i.CE)("div",p,[(0,i.Lk)("section",f,[(0,i.Lk)("div",h,[(0,i.Lk)("div",g,[(0,i.Lk)("a",k,[(0,i.bF)(c,{size:"60px",class:"workflow-icon"},{default:(0,i.k6)((()=>[(0,i.bF)((0,r.R1)(n.Tools))])),_:1}),o[0]||(o[0]=(0,i.Lk)("h2",{class:"feature-title"},"Workflow",-1)),o[1]||(o[1]=(0,i.Lk)("p",{class:"feature-description"}," Explore the quantMS workflow documentation ",-1))])]),(0,i.Lk)("div",b,[(0,i.bF)(d,{to:"/datasets",class:"feature-link"},{default:(0,i.k6)((()=>[(0,i.bF)(c,{size:"60px",class:"datasets-icon"},{default:(0,i.k6)((()=>[(0,i.bF)((0,r.R1)(n.DocumentCopy))])),_:1}),o[2]||(o[2]=(0,i.Lk)("h2",{class:"feature-title"},"Datasets",-1)),o[3]||(o[3]=(0,i.Lk)("p",{class:"feature-description"}," Browse available datasets and resources ",-1))])),_:1,__:[2,3]})]),(0,i.Lk)("div",m,[(0,i.bF)(d,{to:"/baseline",class:"feature-link"},{default:(0,i.k6)((()=>[(0,i.bF)(c,{size:"60px",class:"baseline-icon"},{default:(0,i.k6)((()=>[(0,i.bF)((0,r.R1)(n.Histogram))])),_:1}),o[4]||(o[4]=(0,i.Lk)("h2",{class:"feature-title"},"Baseline",-1)),o[5]||(o[5]=(0,i.Lk)("p",{class:"feature-description"}," View baseline analysis and results ",-1))])),_:1,__:[4,5]})]),(0,i.Lk)("div",v,[(0,i.bF)(d,{to:"/publications",class:"feature-link"},{default:(0,i.k6)((()=>[(0,i.bF)(c,{size:"60px",class:"publications-icon"},{default:(0,i.k6)((()=>[(0,i.bF)((0,r.R1)(n.Document))])),_:1}),o[6]||(o[6]=(0,i.Lk)("h2",{class:"feature-title"},"Publications",-1)),o[7]||(o[7]=(0,i.Lk)("p",{class:"feature-description"}," View scientific publications related to quantMS ",-1))])),_:1,__:[6,7]})])])]),(0,i.Lk)("section",L,[(0,i.Lk)("div",y,[o[8]||(o[8]=(0,i.Lk)("h1",{class:"section-title"},"Introduction",-1)),o[9]||(o[9]=(0,i.Lk)("p",{class:"intro-text"},[(0,i.Lk)("a",{href:"https://quantms.readthedocs.io/en/latest/",class:"text-primary"},"quantms"),(0,i.eW)(" is a bioinformatics best-practice analysis pipeline for Quantitative Mass Spectrometry (MS), including: DDA-LFQ, plexDDA (e.g. TMT, iTRAQ), and DIA. ")],-1)),(0,i.Lk)("div",x,[(0,i.Lk)("img",{src:(0,r.R1)(l),alt:"QuantMS Pipeline",class:"pipeline-image"},null,8,P)]),o[10]||(o[10]=(0,i.Lk)("h2",{class:"citation-title"},"Citing quantms",-1)),o[11]||(o[11]=(0,i.Lk)("blockquote",{class:"citation-block"},[(0,i.eW)(" Dai C, Pfeuffer J, Wang H, Zheng P, KÃ¤ll L, Sachsenberg T, Demichev V, Bai M, Kohlbacher O, Perez-Riverol Y. quantms: a cloud-based pipeline for quantitative proteomics enables the reanalysis of public proteomics data. Nat Methods. 2024 Sep;21(9):1603-1607. doi: 10.1038/s41592-024-02343-1. Epub 2024 Jul 4. PMID: 38965444; PMCID: PMC11399091. "),(0,i.Lk)("a",{href:"https://doi.org/10.1038/s41592-024-02343-1",class:"citation-link"}," [https://doi.org/10.1038/s41592-024-02343-1] ")],-1))])]),(0,i.Lk)("section",w,[o[15]||(o[15]=(0,i.Lk)("h2",{class:"section-title"},"Data Visualizations",-1)),(0,i.Lk)("div",z,[(0,i.Lk)("div",S,[o[12]||(o[12]=(0,i.Lk)("h3",{class:"chart-title"},"Proteins per Project",-1)),(0,i.Lk)("div",{ref_key:"proteinsPerProjectChart",ref:t,class:"chart-container"},null,512)]),(0,i.Lk)("div",_,[o[13]||(o[13]=(0,i.Lk)("h3",{class:"chart-title"},"Peptides per Project",-1)),(0,i.Lk)("div",{ref_key:"peptidesPerProjectChart",ref:a,class:"chart-container"},null,512)]),(0,i.Lk)("div",A,[o[14]||(o[14]=(0,i.Lk)("h3",{class:"chart-title"},"Proteins per Tissue",-1)),(0,i.Lk)("div",{ref_key:"proteinsPerTissueChart",ref:T,class:"chart-container"},null,512)])])])])}}};var D=a(6262);const F=(0,D.A)(T,[["__scopeId","data-v-20910666"]]),R=F},5056:(e,t,a)=>{a.d(t,{Fq:()=>l,sd:()=>r,uh:()=>i});var s=a(5367);const i=()=>(0,s.A)({url:"/data/AE.json",method:"get"}),r=()=>(0,s.A)({url:"/data/DE.json",method:"get"}),l=()=>(0,s.A)({url:"/data/single_cell.json",method:"get"})}}]);
//# sourceMappingURL=629.ef01e0c2.js.map